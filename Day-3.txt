 view:- 
A view is a logical table based on a table or another view.
a view contains no data of it's own .
the table on which the view is based is known as base table.

advantage :-
1)views restrict access to data because the view can display selective columns from the table.
2)views can be used to make simple queries to retrieve the results of complicated queries.
3)one view can be used to retrieve data from several tables.

simple view:-
1)Derives data from only one table.
2)contains no functions or groupby data.
3)can perform DML(data manupulation language insert,update,delete) operation

complex view:-
1)derives data from many table.
2)contains functions or group by data.
3)doesnot always allow DML operations.

example:-

1)create view xyz as select empno,ename from emp where deptno=10;
-------------------------------------------
complex view

create table employee (empno number primary key,name varchar2(20) not null,salary number(9,2),address varchar2(30));

insert into employee values(104,'peter','30000','bangalore');
delete from employee where empno=101;//delete the record from child then we can delete from parent.
select * from employee;
create table loc(empno number references employee,loc varchar2(30));
insert into loc values(104,'India');
select * from loc;

join
--------------------------------------------------------------------------------------------------
inner or equijoins :- in this type of join one column should be common in both the tables and they should have parent and child relation ship.
--------------------------------------------------------------------------------------------
select a.empno,a.name,a.salary,a.address,b.loc from employee a,loc b where a.empno=b.empno;

view
-----------------------
create view tabs as select a.empno,a.name,a.salary,a.address,b.loc from employee a,loc b where a.empno=b.empno;

----------------------------------------------------------------
Task
----------
create a table bank with columns accno,name,address,DOA
create a table trans with column accno,bal,deposite,withdraw,final bal.
display the final status by combining both tables.
* foreign key can be refered to a primary key column only.
------------------------------------------------------------------------------------------------
create table bank(accno number primary key,name varchar2(30),address varchar2(30));

insert into bank values(103,'sam','hyderabad');

create table trans(accno number references bank,bal number(9,2),withdraw number(9,2) default 0,deposite number(9,2) default 0,finalbal number(9,2));

insert into trans(accno,bal,withdraw) values(101,5000,1000);
insert into trans(accno,bal,deposite) values(103,5000,3000);

select * from trans;

update trans set finalbal=bal+deposite-withdraw;


select a.accno,a.name,a.address,b.bal,b.withdraw,b.deposite,b.finalbal from bank a,trans b where a.accno=b.accno;
---------------------------------------------------------
Normalization:- makes easy to maintain the data.other wise it will be difficult for the database administrator to maintain the data.
--------------------------
First Normalization:- All the attributes in a relation must have atomic domains.
The values in an atomic domain are indivisible units.Each attribute must contain only a single value from its predefined domain. 
------------------------------------------------------
course 		|  content
------------------------------------------------------
programming	| java,c++
web		| html,php,asp
------------------------------------------------------
Re-arrange
------------------------------------------------------
course 		|  content
------------------------------------------------------
programming	| java
programming	| c++
web		| html
web		| php
web		| asp
------------------------------------------------------
Composite key 
---------------------------
a composite key is a primary key composed of multiple columns used to identify a record uniquely.
----------------------------------------------------------------------------------------------------
name 	|  address    	|email 
------------------------------------------------
sandip	| bangalore 	|sandip@gmail.com
sandip	| hyderabad		|sandip.k@gmail.com
sandip	| hyderabad		|sandip.m@yahoo.com

------------------------------------------------------------------------------
names are common so we require name,address,email to identify a record uniquely.
------------------------------------------------------------------------------
Second Normalization
----------------------------------
we should have 1st normalization.
The columns are dependent on each other .The second normalization doesn't allow dependency.
----------------------------------------------------------------------------------------
empid   |	name 	|  address    	|email 
----------------------------------------------------------------------------------------
101      |	sandip	| bangalore 	|sandip@gmail.com
102      |	sandip	| hyderabad		|sandip.k@gmail.com
103      |	sandip	| hyderabad		|sandip.m@yahoo.com
 
----------------------------------------------------------------------------------

proj_id 	| proj_name 	| empid
-----------------------------------------------------------
p1	|xyz		|101
p2	|pqr		|102
p3	|abc		|103

--------------------------------------------------------------------------------------------------------
Third Normalization
---------------------------------------
1)we should have 2nd normalization.
2)should not have any functional dependencies.

proj_id 	| proj_name 	| empid
-----------------------------------------------------------
p1	|xyz		|101
p2	|pqr		|102
p3	|abc		|103
p4	|asd		|101

empid 	|name 	 
------------------------------------
101	|sandip		
102	|sandip		
103	|sandip

empid 	|email 	 
------------------------------------
101	|sandip@gmail.com		
102	|sandip.k@gmail.com		
103	|sandip.m@yahoo.com	

empid 	|address	 
------------------------------------
101	|bangalore		
102	|hyderabad		
103	|hyderabad	


--------------------------------------------------------------------------------------
PL-SQL :- programming language.
-----------------------------------------------------
declare variable
begin
exception handling
end
-----------------------------------------------
example:-
--------------------
declare
a number:=10;
b number:=20;
c number;
begin
c:=a+b;
dbms_output.put_line('the result is '||c);
end;
----------------------------------------------------------------------
declare
a number:=10;
b number:=20;
begin
if(a>b)then
dbms_output.put_line('the greatest is '||a);
else
dbms_output.put_line('the greatest is '||b);
end if;
end;
--------------------------------------------------------------------------------------
declare
a number:=10;
b number:=20;
c number:=30;
begin
if(a>b and a>c)then
dbms_output.put_line('the greatest is '||a);
elsif(b>a and b>c)then
dbms_output.put_line('the greatest is '||b);
else
dbms_output.put_line('the greatest is '||c);
end if;
end;
------------------------------------------------------------------------------
declare 
x number;
y number;
z number;
begin
x:=&x;
y:=&y;
z:=x+y;
dbms_output.put_line('the sum is '||z);
end;
---------------------------------------------------------------------------------
PLSQL ------Dynamic entry
---------------------------------------------------------------------------------
w.a.p to enter data of a students
rollno,name,address
phy,chem,math
find sum,avg,grade
if(avg>70)--------->first
if(avg>60)--------->second
if(avg>50)--------->third
else
fail
--------------------------------------------------------------------------------



















































